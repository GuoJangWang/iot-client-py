# coding: utf-8

"""
    Iot API

    Collection of all public API endpoints.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ArduinoMqttv1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'signed_websocket': 'str',
        'url': 'str'
    }

    attribute_map = {
        'signed_websocket': 'signed_websocket',
        'url': 'url'
    }

    def __init__(self, signed_websocket=None, url=None):  # noqa: E501
        """ArduinoMqttv1 - a model defined in OpenAPI"""  # noqa: E501

        self._signed_websocket = None
        self._url = None
        self.discriminator = None

        self.signed_websocket = signed_websocket
        self.url = url

    @property
    def signed_websocket(self):
        """Gets the signed_websocket of this ArduinoMqttv1.  # noqa: E501

        A signed Websocket url to use to connect to things in the cloud  # noqa: E501

        :return: The signed_websocket of this ArduinoMqttv1.  # noqa: E501
        :rtype: str
        """
        return self._signed_websocket

    @signed_websocket.setter
    def signed_websocket(self, signed_websocket):
        """Sets the signed_websocket of this ArduinoMqttv1.

        A signed Websocket url to use to connect to things in the cloud  # noqa: E501

        :param signed_websocket: The signed_websocket of this ArduinoMqttv1.  # noqa: E501
        :type: str
        """
        if signed_websocket is None:
            raise ValueError("Invalid value for `signed_websocket`, must not be `None`")  # noqa: E501

        self._signed_websocket = signed_websocket

    @property
    def url(self):
        """Gets the url of this ArduinoMqttv1.  # noqa: E501

        The url endpoint of the cloud  # noqa: E501

        :return: The url of this ArduinoMqttv1.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArduinoMqttv1.

        The url endpoint of the cloud  # noqa: E501

        :param url: The url of this ArduinoMqttv1.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArduinoMqttv1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

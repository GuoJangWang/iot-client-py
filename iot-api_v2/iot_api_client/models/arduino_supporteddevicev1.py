# coding: utf-8

"""
    Iot API

    Collection of all public API endpoints.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ArduinoSupporteddevicev1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'label': 'str',
        'tags': 'list[str]',
        'type': 'str',
        'vendor': 'str'
    }

    attribute_map = {
        'label': 'label',
        'tags': 'tags',
        'type': 'type',
        'vendor': 'vendor'
    }

    def __init__(self, label=None, tags=None, type=None, vendor=None):  # noqa: E501
        """ArduinoSupporteddevicev1 - a model defined in OpenAPI"""  # noqa: E501

        self._label = None
        self._tags = None
        self._type = None
        self._vendor = None
        self.discriminator = None

        self.label = label
        self.tags = tags
        self.type = type
        self.vendor = vendor

    @property
    def label(self):
        """Gets the label of this ArduinoSupporteddevicev1.  # noqa: E501

        The descriptive label of the device  # noqa: E501

        :return: The label of this ArduinoSupporteddevicev1.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ArduinoSupporteddevicev1.

        The descriptive label of the device  # noqa: E501

        :param label: The label of this ArduinoSupporteddevicev1.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def tags(self):
        """Gets the tags of this ArduinoSupporteddevicev1.  # noqa: E501

        The tags this device belongs to  # noqa: E501

        :return: The tags of this ArduinoSupporteddevicev1.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ArduinoSupporteddevicev1.

        The tags this device belongs to  # noqa: E501

        :param tags: The tags of this ArduinoSupporteddevicev1.  # noqa: E501
        :type: list[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this ArduinoSupporteddevicev1.  # noqa: E501

        The type that should be use in api requests  # noqa: E501

        :return: The type of this ArduinoSupporteddevicev1.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ArduinoSupporteddevicev1.

        The type that should be use in api requests  # noqa: E501

        :param type: The type of this ArduinoSupporteddevicev1.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def vendor(self):
        """Gets the vendor of this ArduinoSupporteddevicev1.  # noqa: E501

        The vendor of the device  # noqa: E501

        :return: The vendor of this ArduinoSupporteddevicev1.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ArduinoSupporteddevicev1.

        The vendor of the device  # noqa: E501

        :param vendor: The vendor of this ArduinoSupporteddevicev1.  # noqa: E501
        :type: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArduinoSupporteddevicev1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

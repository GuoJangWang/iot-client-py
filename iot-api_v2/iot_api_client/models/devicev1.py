# coding: utf-8

"""
    Iot API

    Collection of all public API endpoints.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Devicev1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'csr': 'str',
        'name': 'str',
        'serial': 'str',
        'temp': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'csr': 'csr',
        'name': 'name',
        'serial': 'serial',
        'temp': 'temp',
        'type': 'type'
    }

    def __init__(self, csr=None, name=None, serial=None, temp=True, type=None):  # noqa: E501
        """Devicev1 - a model defined in OpenAPI"""  # noqa: E501

        self._csr = None
        self._name = None
        self._serial = None
        self._temp = None
        self._type = None
        self.discriminator = None

        if csr is not None:
            self.csr = csr
        if name is not None:
            self.name = name
        if serial is not None:
            self.serial = serial
        if temp is not None:
            self.temp = temp
        if type is not None:
            self.type = type

    @property
    def csr(self):
        """Gets the csr of this Devicev1.  # noqa: E501

        A certificate signing request  # noqa: E501

        :return: The csr of this Devicev1.  # noqa: E501
        :rtype: str
        """
        return self._csr

    @csr.setter
    def csr(self, csr):
        """Sets the csr of this Devicev1.

        A certificate signing request  # noqa: E501

        :param csr: The csr of this Devicev1.  # noqa: E501
        :type: str
        """

        self._csr = csr

    @property
    def name(self):
        """Gets the name of this Devicev1.  # noqa: E501

        The friendly name of the device  # noqa: E501

        :return: The name of this Devicev1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Devicev1.

        The friendly name of the device  # noqa: E501

        :param name: The name of this Devicev1.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and not re.search(r'[a-zA-Z0-9_.@-]+', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9_.@-]+/`")  # noqa: E501

        self._name = name

    @property
    def serial(self):
        """Gets the serial of this Devicev1.  # noqa: E501

        The serial uuid of the device  # noqa: E501

        :return: The serial of this Devicev1.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this Devicev1.

        The serial uuid of the device  # noqa: E501

        :param serial: The serial of this Devicev1.  # noqa: E501
        :type: str
        """
        if serial is not None and len(serial) > 64:
            raise ValueError("Invalid value for `serial`, length must be less than or equal to `64`")  # noqa: E501
        if serial is not None and not re.search(r'[a-zA-Z0-9_.@-]+', serial):  # noqa: E501
            raise ValueError(r"Invalid value for `serial`, must be a follow pattern or equal to `/[a-zA-Z0-9_.@-]+/`")  # noqa: E501

        self._serial = serial

    @property
    def temp(self):
        """Gets the temp of this Devicev1.  # noqa: E501

        If temp is true, if the name won't be set after 1 hour it will be deleted  # noqa: E501

        :return: The temp of this Devicev1.  # noqa: E501
        :rtype: bool
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this Devicev1.

        If temp is true, if the name won't be set after 1 hour it will be deleted  # noqa: E501

        :param temp: The temp of this Devicev1.  # noqa: E501
        :type: bool
        """

        self._temp = temp

    @property
    def type(self):
        """Gets the type of this Devicev1.  # noqa: E501

        The type of the device  # noqa: E501

        :return: The type of this Devicev1.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Devicev1.

        The type of the device  # noqa: E501

        :param type: The type of this Devicev1.  # noqa: E501
        :type: str
        """
        if type is not None and len(type) > 64:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `64`")  # noqa: E501
        if type is not None and not re.search(r'[a-zA-Z0-9_.@-]+', type):  # noqa: E501
            raise ValueError(r"Invalid value for `type`, must be a follow pattern or equal to `/[a-zA-Z0-9_.@-]+/`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Devicev1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

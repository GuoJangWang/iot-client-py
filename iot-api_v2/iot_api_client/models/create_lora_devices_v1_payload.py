# coding: utf-8

"""
    Iot API

    Collection of all public API endpoints.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateLoraDevicesV1Payload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app': 'str',
        'app_eui': 'str',
        'app_key': 'str',
        'eui': 'str',
        'name': 'str',
        'serial': 'str',
        'type': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'app': 'app',
        'app_eui': 'app_eui',
        'app_key': 'app_key',
        'eui': 'eui',
        'name': 'name',
        'serial': 'serial',
        'type': 'type',
        'user_id': 'user_id'
    }

    def __init__(self, app=None, app_eui=None, app_key=None, eui=None, name=None, serial=None, type=None, user_id=None):  # noqa: E501
        """CreateLoraDevicesV1Payload - a model defined in OpenAPI"""  # noqa: E501

        self._app = None
        self._app_eui = None
        self._app_key = None
        self._eui = None
        self._name = None
        self._serial = None
        self._type = None
        self._user_id = None
        self.discriminator = None

        self.app = app
        if app_eui is not None:
            self.app_eui = app_eui
        if app_key is not None:
            self.app_key = app_key
        self.eui = eui
        self.name = name
        if serial is not None:
            self.serial = serial
        self.type = type
        self.user_id = user_id

    @property
    def app(self):
        """Gets the app of this CreateLoraDevicesV1Payload.  # noqa: E501

        The app name  # noqa: E501

        :return: The app of this CreateLoraDevicesV1Payload.  # noqa: E501
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this CreateLoraDevicesV1Payload.

        The app name  # noqa: E501

        :param app: The app of this CreateLoraDevicesV1Payload.  # noqa: E501
        :type: str
        """
        if app is None:
            raise ValueError("Invalid value for `app`, must not be `None`")  # noqa: E501

        self._app = app

    @property
    def app_eui(self):
        """Gets the app_eui of this CreateLoraDevicesV1Payload.  # noqa: E501

        The app eui of the lora device  # noqa: E501

        :return: The app_eui of this CreateLoraDevicesV1Payload.  # noqa: E501
        :rtype: str
        """
        return self._app_eui

    @app_eui.setter
    def app_eui(self, app_eui):
        """Sets the app_eui of this CreateLoraDevicesV1Payload.

        The app eui of the lora device  # noqa: E501

        :param app_eui: The app_eui of this CreateLoraDevicesV1Payload.  # noqa: E501
        :type: str
        """
        if app_eui is not None and not re.search(r'[0-9a-z]{16}', app_eui):  # noqa: E501
            raise ValueError(r"Invalid value for `app_eui`, must be a follow pattern or equal to `/[0-9a-z]{16}/`")  # noqa: E501

        self._app_eui = app_eui

    @property
    def app_key(self):
        """Gets the app_key of this CreateLoraDevicesV1Payload.  # noqa: E501

        The app key of the lora device  # noqa: E501

        :return: The app_key of this CreateLoraDevicesV1Payload.  # noqa: E501
        :rtype: str
        """
        return self._app_key

    @app_key.setter
    def app_key(self, app_key):
        """Sets the app_key of this CreateLoraDevicesV1Payload.

        The app key of the lora device  # noqa: E501

        :param app_key: The app_key of this CreateLoraDevicesV1Payload.  # noqa: E501
        :type: str
        """
        if app_key is not None and not re.search(r'[0-9a-z]{16}', app_key):  # noqa: E501
            raise ValueError(r"Invalid value for `app_key`, must be a follow pattern or equal to `/[0-9a-z]{16}/`")  # noqa: E501

        self._app_key = app_key

    @property
    def eui(self):
        """Gets the eui of this CreateLoraDevicesV1Payload.  # noqa: E501

        The eui of the lora device  # noqa: E501

        :return: The eui of this CreateLoraDevicesV1Payload.  # noqa: E501
        :rtype: str
        """
        return self._eui

    @eui.setter
    def eui(self, eui):
        """Sets the eui of this CreateLoraDevicesV1Payload.

        The eui of the lora device  # noqa: E501

        :param eui: The eui of this CreateLoraDevicesV1Payload.  # noqa: E501
        :type: str
        """
        if eui is None:
            raise ValueError("Invalid value for `eui`, must not be `None`")  # noqa: E501
        if eui is not None and not re.search(r'[0-9a-z]{16}', eui):  # noqa: E501
            raise ValueError(r"Invalid value for `eui`, must be a follow pattern or equal to `/[0-9a-z]{16}/`")  # noqa: E501

        self._eui = eui

    @property
    def name(self):
        """Gets the name of this CreateLoraDevicesV1Payload.  # noqa: E501

        A common name for the device  # noqa: E501

        :return: The name of this CreateLoraDevicesV1Payload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateLoraDevicesV1Payload.

        A common name for the device  # noqa: E501

        :param name: The name of this CreateLoraDevicesV1Payload.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def serial(self):
        """Gets the serial of this CreateLoraDevicesV1Payload.  # noqa: E501

        The optional serial number  # noqa: E501

        :return: The serial of this CreateLoraDevicesV1Payload.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this CreateLoraDevicesV1Payload.

        The optional serial number  # noqa: E501

        :param serial: The serial of this CreateLoraDevicesV1Payload.  # noqa: E501
        :type: str
        """

        self._serial = serial

    @property
    def type(self):
        """Gets the type of this CreateLoraDevicesV1Payload.  # noqa: E501

        The type of device  # noqa: E501

        :return: The type of this CreateLoraDevicesV1Payload.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateLoraDevicesV1Payload.

        The type of device  # noqa: E501

        :param type: The type of this CreateLoraDevicesV1Payload.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["lora-device", "mkrwan1300"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this CreateLoraDevicesV1Payload.  # noqa: E501

        The id of the user. Can be the special string 'me'  # noqa: E501

        :return: The user_id of this CreateLoraDevicesV1Payload.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CreateLoraDevicesV1Payload.

        The id of the user. Can be the special string 'me'  # noqa: E501

        :param user_id: The user_id of this CreateLoraDevicesV1Payload.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateLoraDevicesV1Payload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

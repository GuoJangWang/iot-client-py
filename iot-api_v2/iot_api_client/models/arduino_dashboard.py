# coding: utf-8

"""
    Iot API

    Collection of all public API endpoints.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ArduinoDashboard(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'configuration': 'object',
        'created_at': 'datetime',
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'updated_at': 'datetime',
        'user_id': 'str'
    }

    attribute_map = {
        'configuration': 'configuration',
        'created_at': 'created_at',
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'updated_at': 'updated_at',
        'user_id': 'user_id'
    }

    def __init__(self, configuration=None, created_at=None, id=None, name=None, type=None, updated_at=None, user_id=None):  # noqa: E501
        """ArduinoDashboard - a model defined in OpenAPI"""  # noqa: E501

        self._configuration = None
        self._created_at = None
        self._id = None
        self._name = None
        self._type = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None

        self.configuration = configuration
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        self.name = name
        self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def configuration(self):
        """Gets the configuration of this ArduinoDashboard.  # noqa: E501

        The configuration of the dashboard  # noqa: E501

        :return: The configuration of this ArduinoDashboard.  # noqa: E501
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ArduinoDashboard.

        The configuration of the dashboard  # noqa: E501

        :param configuration: The configuration of this ArduinoDashboard.  # noqa: E501
        :type: object
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")  # noqa: E501

        self._configuration = configuration

    @property
    def created_at(self):
        """Gets the created_at of this ArduinoDashboard.  # noqa: E501

        The created at of the dashboard  # noqa: E501

        :return: The created_at of this ArduinoDashboard.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ArduinoDashboard.

        The created at of the dashboard  # noqa: E501

        :param created_at: The created_at of this ArduinoDashboard.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this ArduinoDashboard.  # noqa: E501

        The id of the dashboard  # noqa: E501

        :return: The id of this ArduinoDashboard.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArduinoDashboard.

        The id of the dashboard  # noqa: E501

        :param id: The id of this ArduinoDashboard.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ArduinoDashboard.  # noqa: E501

        The friendly name of the property  # noqa: E501

        :return: The name of this ArduinoDashboard.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArduinoDashboard.

        The friendly name of the property  # noqa: E501

        :param name: The name of this ArduinoDashboard.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this ArduinoDashboard.  # noqa: E501

        The type of the dashboard  # noqa: E501

        :return: The type of this ArduinoDashboard.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ArduinoDashboard.

        The type of the dashboard  # noqa: E501

        :param type: The type of this ArduinoDashboard.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["THING", "SPACE", "PROPERTIES"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this ArduinoDashboard.  # noqa: E501

        The updated at of the dashboard  # noqa: E501

        :return: The updated_at of this ArduinoDashboard.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ArduinoDashboard.

        The updated at of the dashboard  # noqa: E501

        :param updated_at: The updated_at of this ArduinoDashboard.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this ArduinoDashboard.  # noqa: E501

        The owner of the dashboard  # noqa: E501

        :return: The user_id of this ArduinoDashboard.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ArduinoDashboard.

        The owner of the dashboard  # noqa: E501

        :param user_id: The user_id of this ArduinoDashboard.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArduinoDashboard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

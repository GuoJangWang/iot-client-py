# coding: utf-8

"""
    Iot API

    Collection of all public API endpoints.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreateLoraGwV1Payload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'mac': 'str',
        'pub': 'str'
    }

    attribute_map = {
        'id': 'id',
        'mac': 'mac',
        'pub': 'pub'
    }

    def __init__(self, id=None, mac=None, pub=None):  # noqa: E501
        """CreateLoraGwV1Payload - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._mac = None
        self._pub = None
        self.discriminator = None

        self.id = id
        self.mac = mac
        self.pub = pub

    @property
    def id(self):
        """Gets the id of this CreateLoraGwV1Payload.  # noqa: E501

        The id of the lora gateway. It's calculated from the mac using magic  # noqa: E501

        :return: The id of this CreateLoraGwV1Payload.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateLoraGwV1Payload.

        The id of the lora gateway. It's calculated from the mac using magic  # noqa: E501

        :param id: The id of this CreateLoraGwV1Payload.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def mac(self):
        """Gets the mac of this CreateLoraGwV1Payload.  # noqa: E501

        The mac/serial_number/device_code of the lora gateway. It is printed on the box, and used to connect to a2a.  # noqa: E501

        :return: The mac of this CreateLoraGwV1Payload.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this CreateLoraGwV1Payload.

        The mac/serial_number/device_code of the lora gateway. It is printed on the box, and used to connect to a2a.  # noqa: E501

        :param mac: The mac of this CreateLoraGwV1Payload.  # noqa: E501
        :type: str
        """
        if mac is None:
            raise ValueError("Invalid value for `mac`, must not be `None`")  # noqa: E501

        self._mac = mac

    @property
    def pub(self):
        """Gets the pub of this CreateLoraGwV1Payload.  # noqa: E501

        The public key of the lora gateway  # noqa: E501

        :return: The pub of this CreateLoraGwV1Payload.  # noqa: E501
        :rtype: str
        """
        return self._pub

    @pub.setter
    def pub(self, pub):
        """Sets the pub of this CreateLoraGwV1Payload.

        The public key of the lora gateway  # noqa: E501

        :param pub: The pub of this CreateLoraGwV1Payload.  # noqa: E501
        :type: str
        """
        if pub is None:
            raise ValueError("Invalid value for `pub`, must not be `None`")  # noqa: E501

        self._pub = pub

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateLoraGwV1Payload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

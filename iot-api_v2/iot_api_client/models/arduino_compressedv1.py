# coding: utf-8

"""
    Iot API

    Collection of all public API endpoints.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ArduinoCompressedv1(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'not_after': 'datetime',
        'not_before': 'datetime',
        'serial': 'str',
        'signature': 'str'
    }

    attribute_map = {
        'not_after': 'not_after',
        'not_before': 'not_before',
        'serial': 'serial',
        'signature': 'signature'
    }

    def __init__(self, not_after=None, not_before=None, serial=None, signature=None):  # noqa: E501
        """ArduinoCompressedv1 - a model defined in OpenAPI"""  # noqa: E501

        self._not_after = None
        self._not_before = None
        self._serial = None
        self._signature = None
        self.discriminator = None

        self.not_after = not_after
        self.not_before = not_before
        self.serial = serial
        self.signature = signature

    @property
    def not_after(self):
        """Gets the not_after of this ArduinoCompressedv1.  # noqa: E501

        The ending date of the certificate  # noqa: E501

        :return: The not_after of this ArduinoCompressedv1.  # noqa: E501
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this ArduinoCompressedv1.

        The ending date of the certificate  # noqa: E501

        :param not_after: The not_after of this ArduinoCompressedv1.  # noqa: E501
        :type: datetime
        """
        if not_after is None:
            raise ValueError("Invalid value for `not_after`, must not be `None`")  # noqa: E501

        self._not_after = not_after

    @property
    def not_before(self):
        """Gets the not_before of this ArduinoCompressedv1.  # noqa: E501

        The starting date of the certificate  # noqa: E501

        :return: The not_before of this ArduinoCompressedv1.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this ArduinoCompressedv1.

        The starting date of the certificate  # noqa: E501

        :param not_before: The not_before of this ArduinoCompressedv1.  # noqa: E501
        :type: datetime
        """
        if not_before is None:
            raise ValueError("Invalid value for `not_before`, must not be `None`")  # noqa: E501

        self._not_before = not_before

    @property
    def serial(self):
        """Gets the serial of this ArduinoCompressedv1.  # noqa: E501

        The serial number of the certificate  # noqa: E501

        :return: The serial of this ArduinoCompressedv1.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this ArduinoCompressedv1.

        The serial number of the certificate  # noqa: E501

        :param serial: The serial of this ArduinoCompressedv1.  # noqa: E501
        :type: str
        """
        if serial is None:
            raise ValueError("Invalid value for `serial`, must not be `None`")  # noqa: E501

        self._serial = serial

    @property
    def signature(self):
        """Gets the signature of this ArduinoCompressedv1.  # noqa: E501

        The signature of the certificate  # noqa: E501

        :return: The signature of this ArduinoCompressedv1.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ArduinoCompressedv1.

        The signature of the certificate  # noqa: E501

        :param signature: The signature of this ArduinoCompressedv1.  # noqa: E501
        :type: str
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")  # noqa: E501

        self._signature = signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArduinoCompressedv1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
